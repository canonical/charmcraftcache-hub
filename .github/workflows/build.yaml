name: Build & release wheels

on:
  push:
    branches:
      - main
  schedule:
    - cron: '53 23 * * *'  # Daily at 23:53 UTC
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        runner:
          - name: X64
            runs-on: ubuntu-latest
          - name: ARM64
            runs-on: Ubuntu_ARM64_4C_16G_01
    name: Build wheels | ${{ matrix.runner.name }}
    runs-on: ${{ matrix.runner.runs-on }}
    timeout-minutes: 180
    steps:
      - name: (GitHub-hosted ARM runner) Update git
        if: ${{ matrix.runner.name == 'ARM64' }}
        run: |
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt-get update
          sudo apt-get install git -y
      - name: (GitHub-hosted ARM runner) Install GitHub CLI
        if: ${{ matrix.runner.name == 'ARM64' }}
        # Copied from
        # https://github.com/cli/cli/blob/trunk/docs/install_linux.md#debian-ubuntu-linux-raspberry-pi-os-apt
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install gh -y
      - name: (GitHub-hosted ARM runner) Install pipx
        if: ${{ matrix.runner.name == 'ARM64' }}
        run: |
          sudo apt-get update
          sudo apt-get install python3-pip python3-venv -y
          python3 -m pip install pipx
          python3 -m pipx ensurepath
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
      - name: Install pyenv
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev -y
          curl https://pyenv.run | bash
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up environment
        run: |
          pipx install poetry
          pipx install tox
      - name: Install CLI
        run: pipx install ./cli/
      - name: Build wheels from source
        run: build charms.json
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.runner.name }}
          path: ~/charmcraftcache-hub-ci/release/
          if-no-files-found: error

  release:
    name: Release wheels
    needs:
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create directory
        run: mkdir ~/release/
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: ~/release/
          pattern: wheels-*
          merge-multiple: true
      - name: Create GitHub release
        run: create-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write  # Needed to create release
